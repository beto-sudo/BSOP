diff --git a/lib/branding.ts b/lib/branding.ts
new file mode 100644
index 0000000..8c6e9f1
--- /dev/null
+++ b/lib/branding.ts
@@ -0,0 +1,144 @@
+// lib/branding.ts
+// Utilidades para aplicar el branding por empresa usando variables CSS.
+// Se puede invocar desde cualquier parte del cliente:
+//   applyBranding(selectedCompany?.settings?.branding)
+//
+// Los colores admiten HEX (#RRGGBB). Internamente los convertimos a RGB con CSS vars.
+
+export type BrandingTheme = {
+  // Color de marca principal
+  primary: string; // p.ej. "#2563eb"
+  primaryForeground: string; // p.ej. "#ffffff"
+
+  // Sidebar
+  sidebarBg: string;          // p.ej. "#0b1220"
+  sidebarFg: string;          // p.ej. "#d3e1ff"
+  sidebarMuted: string;       // p.ej. "#9db0d3"
+  sidebarActiveBg: string;    // p.ej. "#172137"
+  sidebarActiveFg: string;    // p.ej. "#ffffff"
+  sidebarBorder: string;      // p.ej. "#1f2a44"
+
+  // (Opcional) logo por empresa – tú decides cómo usarlo en el componente.
+  logoUrl?: string;
+};
+
+export const DEFAULT_BRANDING: BrandingTheme = {
+  primary: "#2563eb",
+  primaryForeground: "#ffffff",
+  sidebarBg: "#0b1220",
+  sidebarFg: "#d3e1ff",
+  sidebarMuted: "#9db0d3",
+  sidebarActiveBg: "#172137",
+  sidebarActiveFg: "#ffffff",
+  sidebarBorder: "#1f2a44",
+  logoUrl: "/logo.svg",
+};
+
+function clampHex(hex: string) {
+  const m = hex.trim().match(/^#?([0-9a-fA-F]{6})$/);
+  return m ? `#${m[1].toLowerCase()}` : "#000000";
+}
+
+function hexToRgbTuple(hex: string): [number, number, number] {
+  const h = clampHex(hex).slice(1);
+  const r = parseInt(h.slice(0, 2), 16);
+  const g = parseInt(h.slice(2, 4), 16);
+  const b = parseInt(h.slice(4, 6), 16);
+  return [r, g, b];
+}
+
+function setCssVar(name: string, value: string) {
+  document.documentElement.style.setProperty(name, value);
+}
+
+function setCssColorVar(name: string, hex: string) {
+  const [r, g, b] = hexToRgbTuple(hex);
+  setCssVar(name, `${r} ${g} ${b}`); // formato para rgb(var(--x) / <alpha-value>)
+}
+
+export function applyBranding(input?: Partial<BrandingTheme>) {
+  if (typeof window === "undefined") return; // solo cliente
+  const theme: BrandingTheme = { ...DEFAULT_BRANDING, ...(input || {}) };
+
+  // Tokens base (RGB para usarlos con Tailwind "rgb(var(--x) / <alpha>)")
+  setCssColorVar("--brand-primary", theme.primary);
+  setCssColorVar("--brand-primary-foreground", theme.primaryForeground);
+
+  // Tokens del sidebar (los usamos directo como var(--sidebar-xxx))
+  setCssVar("--sidebar-bg", clampHex(theme.sidebarBg));
+  setCssVar("--sidebar-fg", clampHex(theme.sidebarFg));
+  setCssVar("--sidebar-muted", clampHex(theme.sidebarMuted));
+  setCssVar("--sidebar-active-bg", clampHex(theme.sidebarActiveBg));
+  setCssVar("--sidebar-active-fg", clampHex(theme.sidebarActiveFg));
+  setCssVar("--sidebar-border", clampHex(theme.sidebarBorder));
+
+  // Logo opcional disponible via dataset
+  if (theme.logoUrl) {
+    document.body.dataset.logoUrl = theme.logoUrl;
+  } else {
+    delete document.body.dataset.logoUrl;
+  }
+}
+
+// Ayudita para probar en consola:
+// window.__applyBranding && window.__applyBranding({ primary: "#22c55e" })
+declare global {
+  interface Window {
+    __applyBranding?: (b?: Partial<BrandingTheme>) => void;
+  }
+}
+if (typeof window !== "undefined") {
+  window.__applyBranding = applyBranding;
+}
diff --git a/components/CompanyThemeProvider.tsx b/components/CompanyThemeProvider.tsx
new file mode 100644
index 0000000..2f3ef0b
--- /dev/null
+++ b/components/CompanyThemeProvider.tsx
@@ -0,0 +1,33 @@
+"use client";
+import { ReactNode, useEffect } from "react";
+import { applyBranding, DEFAULT_BRANDING, type BrandingTheme } from "@/lib/branding";
+
+type Props = {
+  children: ReactNode;
+  /** Branding inicial opcional; si no se pasa, aplicamos el default. */
+  initialBranding?: Partial<BrandingTheme>;
+};
+
+export function CompanyThemeProvider({ children, initialBranding }: Props) {
+  useEffect(() => {
+    // Aplica al montar – luego tú puedes volver a llamar applyBranding()
+    // desde el Company Switcher cuando el usuario cambie de empresa.
+    applyBranding(initialBranding ?? DEFAULT_BRANDING);
+  }, [initialBranding]);
+
+  return <>{children}</>;
+}
diff --git a/app/layout.tsx b/app/layout.tsx
index 8a7d0ef..9b32f43 100644
--- a/app/layout.tsx
+++ b/app/layout.tsx
@@ -1,10 +1,16 @@
 import type { Metadata } from "next";
 import { Inter } from "next/font/google";
 import "./globals.css";
+import { CompanyThemeProvider } from "@/components/CompanyThemeProvider";
 
 const inter = Inter({ subsets: ["latin"] });
 
 export const metadata: Metadata = {
   title: "BSOP",
   description: "Multi-company management platform",
 };
 
 export default function RootLayout({
   children,
 }: {
   children: React.ReactNode;
 }) {
   return (
-    <html lang="es">
-      <body className={inter.className}>{children}</body>
+    <html lang="es" suppressHydrationWarning>
+      <body className={inter.className}>
+        <CompanyThemeProvider>
+          {children}
+        </CompanyThemeProvider>
+      </body>
     </html>
   );
 }
diff --git a/tailwind.config.ts b/tailwind.config.ts
index 6f1b5b3..a21a3a7 100644
--- a/tailwind.config.ts
+++ b/tailwind.config.ts
@@ -1,9 +1,27 @@
 import type { Config } from "tailwindcss";
 
 const config: Config = {
   content: [
     "./app/**/*.{ts,tsx}",
     "./components/**/*.{ts,tsx}",
     "./styles/**/*.{ts,tsx}",
   ],
   theme: {
-    extend: {},
+    extend: {
+      colors: {
+        // Tokens de marca en formato rgb(var(--x) / <alpha>)
+        brand: {
+          primary: "rgb(var(--brand-primary) / <alpha-value>)",
+          primaryFg: "rgb(var(--brand-primary-foreground) / <alpha-value>)",
+        },
+      },
+    },
   },
   plugins: [],
 };
 export default config;
